The package.json file is the heart of Node.js system. It is the manifest file of any Node.js project and contains the metadata of the project.


This metadata information in package.json file can be categorized into below categories.

Identifying metadata properties: It basically consist of the properties to identify the module/project such as the name of the project, current version of the module, license, author of the project, description about the project etc.

Functional metadata properties: As the name suggests, it consists of the functional values/properties of the project/module such as the entry/starting point of the module, dependencies in project, scripts being used, repository links of Node project etc.

-------------------
Create a package.json file
Using npm init: Running this command, system expects user to fill the vital information required as discussed above. It provides users with default values which are editable by the user. 
Syntax: 
 
npm init

---------------------
package-lock.json is a file that is generated when we try to install the node. It is generated by the Node Package Manager(npm). package-lock.json will ensure that the same versions of packages are installed.

------------------------

Difference between package.json vs package-lock.json:

package.json
It displays the basic information about the project
It is required for every project.
It contains information such as name, description, author, script, and dependencies.

package-lock.json
It describe a exact tree structures that allow to download identical trees
It is automatically generated when installing node modules
It contains the name, dependencies, and locked version of the project.

IMP - package.json is very imp and should not be deleted at any cost

if we delete node_modules or a new dev is using then we use 
npm intall  - to install it dependecies from package.json

------------
Imp q - is node js single threaded or multi threaded?
single threaded

Node.js is single-threaded by default, using an event-driven, non-blocking I/O model to handle concurrent operations. This allows it to handle many connections simultaneously without creating new threads for each one. However, it can use worker threads and child processes to handle more complex tasks.